preparazione dataset
python dataset_addestramento\prepare_swarm.py

verifica dataset
python dataset_addestramento\verify_scenario.py

addestramento
python datacom_full.py --train

inferenza
python datacom_full.py --infer

visualizzazione
python viz_infer.py

throughput → aumenta la reward
latency, distance, violations → la diminuiscono (sono costi)
e violations pesa tantissimo (-30 * violazioni per UAV).
| Fase        | Reward media          | Significato                             |
| ----------- | --------------------- | --------------------------------------- |
| Epoche 1–10 | ≈ −3                  | Policy casuale, inizializzazione PPO    |
| 10–30       | ↑ verso 0 o positivo  | Impara a minimizzare le violazioni      |
| 30–60       | → cresce sopra 50–100 | Inizia a ottimizzare throughput/latenza |
| >100        | stabilizza su 90–120  | Policy stabile e performante            |

verifica presenza collegamenti u2u in dataset.json
import json, pathlib

# Sei già in dataset_addestramento/, quindi il file è "dataset.json"
path = pathlib.Path("dataset.json")

if not path.exists():
    raise FileNotFoundError(f"File non trovato: {path.resolve()}")

data = json.loads(path.read_text())
u2u_total = sum(len(s.get("u2u", [])) for s in data["slots"])
print(f"Totale link U2U trovati nel dataset: {u2u_total}")

if u2u_total > 0:
    s0 = data["slots"][0]
    print(f"Esempio slot 0: {len(s0.get('u2u', []))} link U2U")

